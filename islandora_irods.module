<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

/**
 * Implements hook_menu().
 */
function islandora_irods_menu() {
  return array(
    'islandora/object/%islandora_object/view_irods' => array(
      'title' => 'Storage',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_irods_view',
      'page arguments' => array(2),
      'access callback' => 'islandora_irods_access_callback',
      'access arguments' => array(2),
      'file' => 'includes/utilities.inc',
    ),
    'islandora/object/%islandora_object/download_irods_resource' => array(
      'title' => 'Download AIP',
      'type' => MENU_CALLBACK,
      'page callback' => 'islandora_irods_get_data_object_id',
      'page arguments' => array(2),
      'access callback' => 'islandora_irods_access_callback',
      'access arguments' => array(2),
      'delivery callback' => 'islandora_irods_download',
      'file' => 'includes/utilities.inc',
    ),
    'admin/islandora/tools/irods' => array(
      'title' => 'Islandora iRODS',
      'description' => 'Settings for the Islandora iRODS module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_irods_settings'),
      'access arguments' => array('administer islandora_irods'),
      'file' => 'includes/admin.inc',
    )
  );
}

/**
 * Delivery callback used to download the object.
 *
 * @param string $output
 *   iRODS-object id
 */
function islandora_irods_download($output) {
  require_once('includes/utilities.inc');
  $variables=islandora_irods_get_variables();

  $id = $output;
  $irods_py_path = drupal_get_path('module', 'islandora_irods') . variable_get('islandora_irodsmd_executable_path', '/py/islandorairods.py');
  
  drupal_add_http_header('Content-type', 'application/octet-stream'); 
  
  # get filename
  $command = "python -c \"import imp; iirods = imp.load_source('islandorairods', '$irods_py_path'); iirods.getFileName('$id', '$variables[host]', '$variables[port]', '$variables[user]', '$variables[password]', '$variables[zone]')\" ";
  $filename = shell_exec($command);
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $filename);
   
  # get file size
  $command = "python -c \"import imp; iirods = imp.load_source('islandorairods', '$irods_py_path'); iirods.getFileSize('$id', '$variables[host]', '$variables[port]', '$variables[user]', '$variables[password]', '$variables[zone]')\" ";
  $size = shell_exec($command);
  drupal_add_http_header('Content-length', $size);
 
  # get data and write it out in $amount sized chunks (necessary to prevent PHP memory from exhausting)  
  $amount = 50000000;
  for($offset=0; $offset<$size; $offset+=($amount+1)) {
    $command = "python -c \"import imp; iirods = imp.load_source('islandorairods', '$irods_py_path'); iirods.getFile('$id', '$variables[host]', '$variables[port]', '$variables[user]', '$variables[password]', '$variables[zone]', '$offset', '$amount')\" ";
    passthru($command); 

    ob_flush(); # writing data to client here
    flush();
  }

}

/**
* Implements hook_permission().
*/
function islandora_irods_permission() {
  return array(
  'access storage' => array(
    'title' => t('View metadata and access contents of iRODS storage'),
    'description' => t('View Storage tab.'),
  ),
  'administer islandora_irods' => array(
    'title' => t('Administer iRODS'),
    'description' => t('Set host, port, zone, user and password for iRODS access'),
    ),
  );
}


/**
 * Access callback.
 *
 * Requires that the given object contains a RELS-EXT datastream and a related irods-resource is defined (and to be
 * viewable, as per the stock permissions).
 *
 * @param AbstractObject $object
 *   The object to test, if NULL the given object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access the irods interface, FALSE
 *   otherwise.
 */
function islandora_irods_access_callback($object) {
  return islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object['RELS-EXT']) && islandora_object_access('access storage', $object) && islandora_irods_irodsresource_exist($object);
}

/**
 * Helper to see if there is a related irods resource defined. 
 *
 * @param AbstractObject $object
 * An AbstractObject representing an object within Fedora.
 *
 * @return bool
 * TRUE if the object has an irods resource, FALSE otherwise.
 */
function islandora_irods_irodsresource_exist(AbstractObject $object) {
 require_once('includes/utilities.inc');
 $existing = false;
 $id = islandora_irods_get_data_object_id($object);
 if (!empty($id)) {
   $existing = islandora_irods_check_object($id);
 }
 return $existing ; 
}
